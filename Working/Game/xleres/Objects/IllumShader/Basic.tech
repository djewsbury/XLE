// CompoundDocument:1
#include "TechniqueLibrary/System/Prefix.h"

#include "xleres/Nodes/Output.sh"
#include "xleres/Nodes/Basic.sh"
#include "xleres/Nodes/Texture.sh"
#include "xleres/ToolsHelper/DecodeParametersTexture_ColoredSpecular.sh"
#include "TechniqueLibrary/Framework/Surface.hlsl"
#include "TechniqueLibrary/Utility/Colour.hlsl"


Texture2D SpecularColorTexture;
cbuffer BasicMaterialConstants
{
	float Opacity;
	float AlphaThreshold;
	float MetalMin;
	float MetalMax;
	float RoughnessMin;
	float RoughnessMax;
	float SpecularMin;
	float SpecularMax;
	float3 MaterialDiffuse;
}
void Basic(VSOUT geo, out GBufferValues result)
{
	float3 Output_63_rgb;
	float Output_63_alpha;
	SampleTextureDiffuse( geo, Output_63_rgb, Output_63_alpha );

	float Output_66_result;
	Output_66_result = MaybeDoAlphaTest( Output_63_alpha, AlphaThreshold );

	float Output_72_result;
	Output_72_result = GetVertexOpacityMultiplier( geo );

	float Output_67_result;
	Output_67_result = Multiply1( Output_66_result, Output_72_result );

	float Output_80_result;
	Output_80_result = Multiply1( Output_67_result, Opacity );

	float3 Output_68_result;
	Output_68_result = VSOUT_GetNormal( geo );

	float3 Output_64_result;
	Output_64_result = MaybeMakeDoubleSided( geo, Output_68_result );

	float2 Output_69_result;
	Output_69_result = VSOUT_GetTexCoord0( geo );

	float4 Output_62_result;
	Output_62_result = SampleAnisotropic( SpecularColorTexture, Output_69_result );

	float2 Output_75_result;
	Combine2( SpecularMin, SpecularMax, Output_75_result );

	float2 Output_76_result;
	Combine2( RoughnessMin, RoughnessMax, Output_76_result );

	float2 Output_77_result;
	Combine2( MetalMin, MetalMax, Output_77_result );

	float3 Output_65_finalDiffuseSample;
	CommonMaterialParam Output_65_materialParam;
	DecodeParametersTexture_ColoredSpecular( Output_77_result, Output_76_result, Output_75_result, Output_63_rgb, Cast_float4_to_float3(Output_62_result), Output_65_finalDiffuseSample, Output_65_materialParam );

	float Output_78_result;
	Output_78_result = SampleTextureAO( geo );

	float Output_79_result;
	Output_79_result = GetVertexAOMultiplier( geo );

	float Output_70_result;
	Output_70_result = Multiply1( Output_79_result, Output_78_result );

	float3 Output_73_result;
	Output_73_result = SRGBToLinear( MaterialDiffuse );

	float3 Output_74_result;
	Output_74_result = Multiply3( Output_73_result, Output_65_finalDiffuseSample );

	GBufferValues Output_71_result;
	Output_71_result = Output_PerPixel( Output_74_result, Output_64_result, Output_65_materialParam, Output_80_result, 1.0f, Output_70_result, Output_79_result, float3(0,0,0) );

	result = Output_71_result;

}
/* <<Chunk:NodeGraph:Basic>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraph xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/ShaderPatcherLayer">
	<ConstantConnections>
		<ConstantConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>normalMapAccuracy</OutputParameterName>
			<Value>1.0f</Value>
		</ConstantConnection>
		<ConstantConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>transmission</OutputParameterName>
			<Value>float3(0,0,0)</Value>
		</ConstantConnection>
	</ConstantConnections>
	<InputParameterConnections>
		<InputParameterConnection>
			<OutputNodeID>80</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<Default>1.f</Default>
			<Name>Opacity</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>1</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>66</OutputNodeID>
			<OutputParameterName>alphaThreshold</OutputParameterName>
			<Default>.33f</Default>
			<Name>AlphaThreshold</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>1</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>62</OutputNodeID>
			<OutputParameterName>inputTexture</OutputParameterName>
			<Default i:nil="true" />
			<Name>SpecularColorTexture</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>2</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>77</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.f</Default>
			<Name>MetalMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>77</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>MetalMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>76</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.5f</Default>
			<Name>RoughnessMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>76</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>RoughnessMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>75</OutputNodeID>
			<OutputParameterName>r</OutputParameterName>
			<Default>0.1f</Default>
			<Name>SpecularMin</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>75</OutputNodeID>
			<OutputParameterName>g</OutputParameterName>
			<Default>1.f</Default>
			<Name>SpecularMax</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>3</VisualNodeId>
		</InputParameterConnection>
		<InputParameterConnection>
			<OutputNodeID>73</OutputNodeID>
			<OutputParameterName>input</OutputParameterName>
			<Default>{1.f, 1.f, 1.f}c</Default>
			<Name>MaterialDiffuse</Name>
			<Semantic></Semantic>
			<Type>auto</Type>
			<VisualNodeId>4</VisualNodeId>
		</InputParameterConnection>
	</InputParameterConnections>
	<NodeConnections>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>blendingAlpha</OutputParameterName>
			<InputNodeID>80</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>65</OutputNodeID>
			<OutputParameterName>specColorSample</OutputParameterName>
			<InputNodeID>62</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float4</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>66</OutputNodeID>
			<OutputParameterName>alpha</OutputParameterName>
			<InputNodeID>63</InputNodeID>
			<InputParameterName>alpha</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>65</OutputNodeID>
			<OutputParameterName>diffuseSample</OutputParameterName>
			<InputNodeID>63</InputNodeID>
			<InputParameterName>rgb</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>worldSpaceNormal</OutputParameterName>
			<InputNodeID>64</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>material</OutputParameterName>
			<InputNodeID>65</InputNodeID>
			<InputParameterName>materialParam</InputParameterName>
			<InputType>CommonMaterialParam</InputType>
			<OutputType>CommonMaterialParam</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>74</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>65</InputNodeID>
			<InputParameterName>finalDiffuseSample</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>67</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>66</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>80</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>67</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>64</OutputNodeID>
			<OutputParameterName>normal</OutputParameterName>
			<InputNodeID>68</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>62</OutputNodeID>
			<OutputParameterName>texCoord</OutputParameterName>
			<InputNodeID>69</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>cookedAmbientOcclusion</OutputParameterName>
			<InputNodeID>70</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>67</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>72</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>74</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>73</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>diffuseAlbedo</OutputParameterName>
			<InputNodeID>74</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float3</InputType>
			<OutputType>float3</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>65</OutputNodeID>
			<OutputParameterName>specularRange</OutputParameterName>
			<InputNodeID>75</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>65</OutputNodeID>
			<OutputParameterName>roughnessRange</OutputParameterName>
			<InputNodeID>76</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>65</OutputNodeID>
			<OutputParameterName>metalRange</OutputParameterName>
			<InputNodeID>77</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float2</InputType>
			<OutputType>float2</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>70</OutputNodeID>
			<OutputParameterName>rhs</OutputParameterName>
			<InputNodeID>78</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>71</OutputNodeID>
			<OutputParameterName>cookedLightOcclusion</OutputParameterName>
			<InputNodeID>79</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
		<NodeConnection>
			<OutputNodeID>70</OutputNodeID>
			<OutputParameterName>lhs</OutputParameterName>
			<InputNodeID>79</InputNodeID>
			<InputParameterName>result</InputParameterName>
			<InputType>float</InputType>
			<OutputType>float</OutputType>
			<Semantic i:nil="true" />
		</NodeConnection>
	</NodeConnections>
	<Nodes>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Output.sh:Output_PerPixel</FragmentArchiveName>
			<NodeId>71</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>0</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>80</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>5</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleAnisotropic</FragmentArchiveName>
			<NodeId>62</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>6</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleTextureDiffuse</FragmentArchiveName>
			<NodeId>63</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>7</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:MaybeMakeDoubleSided</FragmentArchiveName>
			<NodeId>64</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>8</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/ToolsHelper\DecodeParametersTexture_ColoredSpecular.sh:DecodeParametersTexture_ColoredSpecular</FragmentArchiveName>
			<NodeId>65</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>9</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:MaybeDoAlphaTest</FragmentArchiveName>
			<NodeId>66</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>10</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>67</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>11</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>TechniqueLibrary/Framework/Surface.hlsl:VSOUT_GetNormal</FragmentArchiveName>
			<NodeId>68</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>12</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>TechniqueLibrary/Framework/Surface.hlsl:VSOUT_GetTexCoord0</FragmentArchiveName>
			<NodeId>69</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>13</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply1</FragmentArchiveName>
			<NodeId>70</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>14</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:GetVertexOpacityMultiplier</FragmentArchiveName>
			<NodeId>72</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>15</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>TechniqueLibrary/Utility/Colour.hlsl:SRGBToLinear</FragmentArchiveName>
			<NodeId>73</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>16</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Multiply3</FragmentArchiveName>
			<NodeId>74</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>17</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>75</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>18</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>76</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>19</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Basic.sh:Combine2</FragmentArchiveName>
			<NodeId>77</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>20</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:SampleTextureAO</FragmentArchiveName>
			<NodeId>78</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>21</VisualNodeId>
		</Node>
		<Node>
			<FragmentArchiveName>xleres/Nodes\Texture.sh:GetVertexAOMultiplier</FragmentArchiveName>
			<NodeId>79</NodeId>
			<NodeType>Procedure</NodeType>
			<VisualNodeId>22</VisualNodeId>
		</Node>
	</Nodes>
	<OutputParameterConnections />
	<PreviewSettingsObjects>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize>result.diffuseAlbedo</OutputToVisualize>
			<VisualNodeId>0</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>5</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>6</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>7</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>8</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize>result2.roughness</OutputToVisualize>
			<VisualNodeId>9</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>10</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>11</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>12</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>13</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>14</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>15</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>16</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>17</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>18</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>19</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>20</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>21</VisualNodeId>
		</PreviewSettings>
		<PreviewSettings>
			<Geometry>Plane2D</Geometry>
			<OutputToVisualize></OutputToVisualize>
			<VisualNodeId>22</VisualNodeId>
		</PreviewSettings>
	</PreviewSettingsObjects>
	<VisualNodes>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>1660</d4p1:x>
				<d4p1:y>207</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-496</d4p1:x>
				<d4p1:y>643</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-985</d4p1:x>
				<d4p1:y>-91</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-614</d4p1:x>
				<d4p1:y>-428</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>237</d4p1:x>
				<d4p1:y>-201</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>377</d4p1:x>
				<d4p1:y>561</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-476</d4p1:x>
				<d4p1:y>-93</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-476</d4p1:x>
				<d4p1:y>211</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>817</d4p1:x>
				<d4p1:y>180</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>262</d4p1:x>
				<d4p1:y>-31</d4p1:y>
			</Location>
			<State>Normal</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-74</d4p1:x>
				<d4p1:y>343</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>188</d4p1:x>
				<d4p1:y>483</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>656</d4p1:x>
				<d4p1:y>182</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-862</d4p1:x>
				<d4p1:y>6</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>1059</d4p1:x>
				<d4p1:y>664</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-117</d4p1:x>
				<d4p1:y>540</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>590</d4p1:x>
				<d4p1:y>-143</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>771</d4p1:x>
				<d4p1:y>-109</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-174</d4p1:x>
				<d4p1:y>-229</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-175</d4p1:x>
				<d4p1:y>-285</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>-181</d4p1:x>
				<d4p1:y>-344</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>788</d4p1:x>
				<d4p1:y>691</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
		<VisualNode>
			<Location xmlns:d4p1="http://schemas.datacontract.org/2004/07/System.Drawing">
				<d4p1:x>773</d4p1:x>
				<d4p1:y>621</d4p1:y>
			</Location>
			<State>Collapsed</State>
		</VisualNode>
	</VisualNodes>
</NodeGraph>
)-- */
/* <<Chunk:NodeGraphContext:Basic>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraphContext xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/ShaderPatcherLayer">
	<HasTechniqueConfig>true</HasTechniqueConfig>
	<ShaderParameters xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Variables xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
</NodeGraphContext>
)-- */



#if !(VSOUT_HAS_TEXCOORD && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
GBufferEncoded deferred_main(VSOUT geo)
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...
	// DoAlphaTest(geo, GetAlphaThreshold());
	GBufferValues result;
    Basic(geo, result);
	return Encode(result);
}



#include "xleres/Forward/Transparency/util.h"

float4 io_main(VSOUT geo, SystemInputs sys) : SV_Target0
{
    float destinationDepth = DuplicateOfDepthBuffer[uint2(geo.position.xy)];
	float ndcComparison = geo.position.z; // / geo.position.w;
	if (ndcComparison > destinationDepth)
		discard;

    GBufferValues sample;
    Basic(geo, sample);

		// note --  At alpha threshold, we just consider
		//			it opaque. It's a useful optimisation
		//			that goes hand in hand with the pre-depth pass.
	const float minAlpha =   1.f / 255.f;
	const float maxAlpha = 0.95f; // 254.f / 255.f;  // AlphaThreshold;
	if (sample.blendingAlpha < minAlpha) {
		discard;
	}

    float4 result = LightSample(sample, geo, sys);

    if (result.a >= maxAlpha) {
		return float4(LightingScale * result.rgb, 1.f); // result.a);
	} else {
		#if !MAT_PREMULTIPLIED_ALPHA
			result.rgb *= result.a;
		#endif

		OutputFragmentNode(uint2(geo.position.xy), result, ndcComparison);
		discard;
		return 0.0.xxxx;
	}
}



[earlydepthstencil]
float4 stochastic_main(VSOUT geo,
	#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
		uint primitiveID : SV_PrimitiveID,
	#endif
	SystemInputs sys) : SV_Target
{
	float occlusion;
	uint type = CalculateStochasticPixelType(geo.position, occlusion);
	[branch] if (type > 0) {
		if (type == 2) return float4(0.0.xxx, 1); // discard;

		// Only need to calculate the "alpha" value for this step...
		GBufferValues sample;
		Basic(geo, sample);
		return float4(0.0.xxx, sample.blendingAlpha);
	}

	GBufferValues sample;
	Basic(geo, sample);

	float4 litValue = LightSample(sample, geo, sys);
	return float4((LightingScale * (1.f - occlusion) * litValue.a) * litValue.rgb, litValue.a);
}



#include "Forward/Transparency/depthonlyutil.h"

#if (STOCHASTIC_TRANS)

	void depthonly_main(
		VSOUT geo, uint primitiveID : SV_PrimitiveID,
		out uint oCoverage : SV_Coverage
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			, out uint oPrimId : SV_Target0
			#if (STOCHASTIC_TRANS_OPACITY==1)
				, out float oOpacity : SV_Target1
			#endif
		#elif (STOCHASTIC_TRANS_OPACITY==1)
			, out float oOpacity : SV_Target0
		#endif

		)
	{
		GBufferValues sample;
		Basic(geo, sample);
		float alpha = sample.blendingAlpha;

		oCoverage = StochasticTransMask(uint2(geo.position.xy), alpha, primitiveID);
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			oPrimId = primitiveID;
		#endif
		#if (STOCHASTIC_TRANS_OPACITY==1)
			oOpacity = alpha;
		#endif
	}

#else

	#if !(VSOUT_HAS_TEXCOORD && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
		[earlydepthstencil]
	#endif
	void depthonly_main(VSOUT geo)
	{
		#if !(VSOUT_HAS_TEXCOORD && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
				// execute sampling only for discard() events
			GBufferValues sample;
			Basic(geo, sample);
		#endif
	}

#endif


/* <<Chunk:TechniqueConfig:main>>--(
~Inherit; xleres/TechniqueLibrary/Config/Legacy/IllumLegacy.tech
~Deferred
    PixelShader=<.>:deferred_main
~OrderIndependentTransparency
    PixelShader=<.>:oi_main
~StochasticTransparency
    PixelShader=<.>:stochastic_main
~DepthOnly
    PixelShader=<.>:depthonly_main
)--*/

/* <<Chunk:CBLayout:main>>--(
float Opacity = 1.f;
float AlphaThreshold = .33f;
float MetalMin = 0.f;
float MetalMax = 1.f;
float RoughnessMin = 0.5f;
float RoughnessMax = 1.f;
float SpecularMin = 0.1f;
float SpecularMax = 1.f;
float3 MaterialDiffuse = {1.f, 1.f, 1.f}c;

)--*/

